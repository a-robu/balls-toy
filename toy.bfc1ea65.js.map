{"version":3,"sources":["node_modules/victor/index.js","src/ball.js","src/disk.js","src/toy.js"],"names":["ball","i","x","y","id","dx","dy","fx","fy","hit","size","Math","random","mass","module","exports","Victor","require","Disk","pos","vel","radius","converted","PI","pow","a_ball","constant","Object","dimensions_to_vec","dims","width","height","spawn_balls","n","balls","push","sim","canvas","apply_force_pair","ball_a","ball_b","dist","sqrt","penet","elastic","apply_force","vec","wall_force","disk","dimensions","to_legacy","f","apply_mouse_force","mouse_x","mouse_y","update_vel_reset_force","time","friction","gravity","paused","initial_balls","run","document","getElementById","context","getContext","window","innerWidth","innerHeight","list","update","length","o","from_legacy","clearRect","fillStyle","beginPath","arc","closePath","fill","stroke","addEventListener","e","clientX","offsetLeft","clientY","offsetTop","keyCode","setInterval"],"mappings":"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","file":"toy.bfc1ea65.js","sourceRoot":"..","sourcesContent":["exports = module.exports = Victor;\n\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\nfunction Victor (x, y) {\n\tif (!(this instanceof Victor)) {\n\t\treturn new Victor(x, y);\n\t}\n\n\t/**\n\t * The X axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.x;\n\t *     // => 42\n\t *\n\t * @api public\n\t */\n\tthis.x = x || 0;\n\n\t/**\n\t * The Y axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.y;\n\t *     // => 21\n\t *\n\t * @api public\n\t */\n\tthis.y = y || 0;\n};\n\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromArray = function (arr) {\n\treturn new Victor(arr[0] || 0, arr[1] || 0);\n};\n\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromObject = function (obj) {\n\treturn new Victor(obj.x || 0, obj.y || 0);\n};\n\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addX = function (vec) {\n\tthis.x += vec.x;\n\treturn this;\n};\n\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addY = function (vec) {\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.add = function (vec) {\n\tthis.x += vec.x;\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalar = function (scalar) {\n\tthis.x += scalar;\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarX = function (scalar) {\n\tthis.x += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarY = function (scalar) {\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractX = function (vec) {\n\tthis.x -= vec.x;\n\treturn this;\n};\n\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractY = function (vec) {\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtract = function (vec) {\n\tthis.x -= vec.x;\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalar = function (scalar) {\n\tthis.x -= scalar;\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarX = function (scalar) {\n\tthis.x -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarY = function (scalar) {\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideX = function (vector) {\n\tthis.x /= vector.x;\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideY = function (vector) {\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divide = function (vector) {\n\tthis.x /= vector.x;\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalar = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\treturn this;\n};\n\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarX = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarY = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.y = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertX = function () {\n\tthis.x *= -1;\n\treturn this;\n};\n\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertY = function () {\n\tthis.y *= -1;\n\treturn this;\n};\n\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invert = function () {\n\tthis.invertX();\n\tthis.invertY();\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyX = function (vector) {\n\tthis.x *= vector.x;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyY = function (vector) {\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiply = function (vector) {\n\tthis.x *= vector.x;\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalar = function (scalar) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarX = function (scalar) {\n\tthis.x *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarY = function (scalar) {\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.normalize = function () {\n\tvar length = this.length();\n\n\tif (length === 0) {\n\t\tthis.x = 1;\n\t\tthis.y = 0;\n\t} else {\n\t\tthis.divide(Victor(length, length));\n\t}\n\treturn this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.limit = function (max, factor) {\n\tif (Math.abs(this.x) > max){ this.x *= factor; }\n\tif (Math.abs(this.y) > max){ this.y *= factor; }\n\treturn this;\n};\n\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n\tthis.randomizeX(topLeft, bottomRight);\n\tthis.randomizeY(topLeft, bottomRight);\n\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.x, bottomRight.x);\n\tvar max = Math.max(topLeft.x, bottomRight.x);\n\tthis.x = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.y, bottomRight.y);\n\tvar max = Math.max(topLeft.y, bottomRight.y);\n\tthis.y = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n\tif (!! Math.round(Math.random())) {\n\t\tthis.randomizeX(topLeft, bottomRight);\n\t} else {\n\t\tthis.randomizeY(topLeft, bottomRight);\n\t}\n\treturn this;\n};\n\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.unfloat = function () {\n\tthis.x = Math.round(this.x);\n\tthis.y = Math.round(this.y);\n\treturn this;\n};\n\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.toFixed = function (precision) {\n\tif (typeof precision === 'undefined') { precision = 8; }\n\tthis.x = this.x.toFixed(precision);\n\tthis.y = this.y.toFixed(precision);\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixX = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.x = (1 - amount) * this.x + amount * vec.x;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixY = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.y = (1 - amount) * this.y + amount * vec.y;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mix = function (vec, amount) {\n\tthis.mixX(vec, amount);\n\tthis.mixY(vec, amount);\n\treturn this;\n};\n\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\nVictor.prototype.clone = function () {\n\treturn new Victor(this.x, this.y);\n};\n\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyX = function (vec) {\n\tthis.x = vec.x;\n\treturn this;\n};\n\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyY = function (vec) {\n\tthis.y = vec.y;\n\treturn this;\n};\n\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copy = function (vec) {\n\tthis.copyX(vec);\n\tthis.copyY(vec);\n\treturn this;\n};\n\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.zero = function () {\n\tthis.x = this.y = 0;\n\treturn this;\n};\n\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\nVictor.prototype.dot = function (vec2) {\n\treturn this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n\treturn (this.x * vec2.y ) - (this.y * vec2.x );\n};\n\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.projectOnto = function (vec2) {\n    var coeff = ( (this.x * vec2.x)+(this.y * vec2.y) ) / ((vec2.x*vec2.x)+(vec2.y*vec2.y));\n    this.x = coeff * vec2.x;\n    this.y = coeff * vec2.y;\n    return this;\n};\n\n\nVictor.prototype.horizontalAngle = function () {\n\treturn Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n\treturn radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n\treturn Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n\treturn radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n\tvar nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));\n\tvar ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));\n\n\tthis.x = nx;\n\tthis.y = ny;\n\n\treturn this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n\tangle = degrees2radian(angle);\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function(rotation) {\n\treturn this.rotate(rotation-this.angle());\n};\n\nVictor.prototype.rotateToDeg = function(rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n\tvar angle = this.angle() + rotation;\n\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateBy(rotation);\n};\n\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceX = function (vec) {\n\treturn this.x - vec.x;\n};\n\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceX = function (vec) {\n\treturn Math.abs(this.distanceX(vec));\n};\n\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceY = function (vec) {\n\treturn this.y - vec.y;\n};\n\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceY = function (vec) {\n\treturn Math.abs(this.distanceY(vec));\n};\n\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distance = function (vec) {\n\treturn Math.sqrt(this.distanceSq(vec));\n};\n\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceSq = function (vec) {\n\tvar dx = this.distanceX(vec),\n\t\tdy = this.distanceY(vec);\n\n\treturn dx * dx + dy * dy;\n};\n\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.length = function () {\n\treturn Math.sqrt(this.lengthSq());\n};\n\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.lengthSq = function () {\n\treturn this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isZero = function() {\n\treturn this.x === 0 && this.y === 0;\n};\n\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isEqualTo = function(vec2) {\n\treturn this.x === vec2.x && this.y === vec2.y;\n};\n\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\nVictor.prototype.toString = function () {\n\treturn 'x:' + this.x + ', y:' + this.y;\n};\n\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\nVictor.prototype.toArray = function () {\n\treturn [ this.x, this.y ];\n};\n\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\nVictor.prototype.toObject = function () {\n\treturn { x: this.x, y: this.y };\n};\n\n\nvar degrees = 180 / Math.PI;\n\nfunction random (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees (rad) {\n\treturn rad * degrees;\n}\n\nfunction degrees2radian (deg) {\n\treturn deg / degrees;\n}\n","\nfunction ball(i, x, y)\n{\n    // this is the legacy version of representing the ball, without\n    // using vectors. the usage of this \"class\" is being replaced \n    // by Disk. When the conversion is complete, this \"class\" will\n    // be deleted.\n    this.id = i\n    this.x = x\n    this.y = y\n    this.dx = 0.0\n    this.dy = -10.0\n    this.fx = 0.0\n    this.fy = 0.0\n    this.hit = 0.0\n    this.size = 20 + Math.random() * 10\n    this.mass = (this.size*this.size*3.14)/10\n}\n\nmodule.exports = ball\n","\nconst Victor = require(\"victor\")\nconst ball = require('./ball')\n\nclass Disk {\n    constructor(pos, vel, radius, hit=0) {\n        this.pos = pos\n        this.vel = vel\n        this.radius = radius\n        this.hit = hit\n    }\n\n    get mass() {\n        return Math.PI * Math.pow(this.radius, 2)\n    }\n\n    static spawn(pos) {\n        return new Disk(pos, new Victor(0, -10), 20 + Math.random() * 10)\n    }\n\n    static from_legacy(a_ball) {\n        return new Disk(\n            new Victor(a_ball.x, a_ball.y),\n            new Victor(a_ball.dx, a_ball.dy),\n            a_ball.size,\n            a_ball.hit\n        )\n    }\n\n    to_legacy() {\n        let converted = new ball(null, this.pos.x, this.pos.y)\n        converted.dx = this.vel.x\n        converted.dy = this.vel.y\n        converted.hit = this.hit\n        converted.size = this.radius\n        converted.mass = this.mass\n        return converted\n    }\n}\n\nmodule.exports = Disk\n","\r\nconst Victor = require('victor');\r\nconst Disk = require('./disk');\r\nconst ball = require('./ball');\r\n\r\nvar constant = new Object()\r\nconstant.friction = 1.02\r\nconstant.elastic = 2000\r\nconstant.gravity = 0\r\nconstant.time = 0.01\r\nconstant.paused = false\r\n\r\ninitial_balls = 100\r\n\r\n/** converts {width, height} to {x, y} */\r\nfunction dimensions_to_vec(dims) {\r\n    return new Victor(dims.width, dims.height)\r\n}\r\n\r\nfunction spawn_balls(n) {\r\n    let balls = []\r\n    for (i=0; i < n; i++)\r\n    {\r\n        balls.push(new ball(i, Math.random()*sim.canvas.width, Math.random()*sim.canvas.height))\r\n    }\r\n    return balls\r\n}\r\n\r\nfunction apply_force_pair(ball_a, ball_b) {\r\n    var dx = (ball_a.x-ball_b.x)\r\n    var dy = (ball_a.y-ball_b.y)\r\n    var dist = Math.sqrt(dx*dx + dy*dy)\r\n    var penet = ball_a.size+ball_b.size-dist\r\n    if (penet > 0)\r\n    {\r\n        if (ball_a.hit < 225) {ball_a.hit += 30}\r\n        else {ball_a.hit = 255}\r\n        if (ball_b.hit < 255){ball_b.hit += 30}\r\n        else {ball_b.hit = 255}\r\n        ball_a.fx += dx*penet/dist*constant.elastic\r\n        ball_b.fx -= dx*penet/dist*constant.elastic\r\n        ball_a.fy += dy*penet/dist*constant.elastic\r\n        ball_b.fy -= dy*penet/dist*constant.elastic \r\n    }\r\n}\r\n\r\nfunction apply_force(vec, a_ball) {\r\n    a_ball.fx += vec.x\r\n    a_ball.fy += vec.y\r\n}\r\n\r\nfunction wall_force(disk, dimensions) {\r\n    let a_ball = disk.to_legacy()\r\n    let f = new Victor(0, 0)\r\n    if (a_ball.x - a_ball.size < 0) {\r\n        f.x -= (a_ball.x - a_ball.size)*constant.elastic\r\n    }\r\n    if (a_ball.x + a_ball.size > dimensions.x) {\r\n        f.x -= (a_ball.x +a_ball.size - dimensions.x)*constant.elastic\r\n    }\r\n    if (a_ball.y - a_ball.size < 0) {\r\n        f.y -= (a_ball.y - a_ball.size)*constant.elastic\r\n    }\r\n    if (a_ball.y + a_ball.size > dimensions.y) {\r\n        f.y -= (a_ball.y + a_ball.size - dimensions.y)*constant.elastic\r\n    }\r\n    return f\r\n}\r\n\r\nfunction apply_mouse_force(ball) {\r\n    var dx = (ball.x-sim.mouse_x)\r\n    var dy = (ball.y-sim.mouse_y)\r\n    var dist = Math.sqrt(dx*dx + dy*dy)\r\n    var penet = 100-dist\r\n    if (penet > 0)\r\n    {\r\n        ball.fx += dx*penet/dist*constant.elastic     // add a suck variable with -1 or +1 value\r\n        ball.fy += dy*penet/dist*constant.elastic\r\n    }\r\n}\r\n\r\nfunction update_vel_reset_force(ball) {\r\n    ball.dx += ball.fx/ball.mass*constant.time\r\n    ball.dy += ball.fy/ball.mass*constant.time\r\n    ball.dx = ball.dx/constant.friction\r\n    ball.dy = ball.dy/constant.friction\r\n    ball.x += ball.dx\r\n    ball.y += ball.dy\r\n    ball.fy = constant.gravity*ball.mass\r\n    ball.fx = 0.0\r\n}\r\n\r\nsim = new Object()\r\nsim.run = function () \r\n{\r\n    if (constant.paused == true) {return}\r\n    sim.canvas = document.getElementById(\"balls_canvas\")\r\n    sim.context = sim.canvas.getContext(\"2d\")\r\n    sim.canvas.width = window.innerWidth\r\n    sim.canvas.height = window.innerHeight\r\n    sim.list = spawn_balls(initial_balls)\r\n    sim.update = function ()\r\n    {\r\n        for (i = 0; i < sim.list.length; i++)\r\n        {\r\n            // collision with another ball\r\n            for (o = i+1; o < sim.list.length; o++)\r\n            {\r\n                apply_force_pair(sim.list[i], sim.list[o])                    \r\n            }\r\n            let wf = wall_force(Disk.from_legacy(sim.list[i]), dimensions_to_vec(sim.canvas));\r\n            apply_force(wf, sim.list[i])\r\n            apply_mouse_force(sim.list[i])\r\n        }\r\n\r\n        \r\n        // apply forces and clear them\r\n        for (i in sim.list)\r\n        {\r\n            update_vel_reset_force(sim.list[i])\r\n        }\r\n        \r\n        // clear screen\r\n        sim.context.clearRect(0,0,sim.canvas.width,sim.canvas.height) \r\n\r\n        // render balls\r\n        for (i in sim.list)\r\n        {\r\n            sim.context.fillStyle = \"rgb(0,0,\"+sim.list[i].hit+\")\"\r\n            sim.context.beginPath()\r\n            sim.context.arc(sim.list[i].x,sim.list[i].y,sim.list[i].size,0,Math.PI*2,true)\r\n            sim.context.closePath()\r\n            sim.context.fill()\r\n            sim.context.stroke()\r\n            \r\n            if (sim.list[i].hit > 10){sim.list[i].hit -= 10}\r\n            \r\n        }\r\n    }\r\n    sim.canvas.addEventListener(\"mousemove\", \r\n                        function(e) {\r\n                                        sim.mouse_x = (e.clientX-this.offsetLeft)\r\n                                        sim.mouse_y = (e.clientY-this.offsetTop) \r\n                                    }, false)\r\n    sim.canvas.addEventListener(\"click\", function(e) {sim.list.push(new ball(sim.list.length-1, sim.mouse_x, sim.mouse_y+40))}, false)\r\n    window.addEventListener(\"resize\",function(e) {\r\n                            sim.canvas.width = window.innerWidth;\r\n                            sim.canvas.height = window.innerHeight\r\n                        },false)\r\n    window.addEventListener(\"keydown\", function(e) {if (e.keyCode == 32) constant.paused = !constant.paused})\r\n    \t\t\t    \r\n    setInterval(sim.update, 1000/100)\r\n}\r\n\r\nexports.apply_force = apply_force\r\nexports.ball = ball\r\nexports.dimensions_to_vec = dimensions_to_vec\r\nexports.wall_force = wall_force\r\n"]}