{"version":3,"sources":["src/vec2.js","src/toy.js"],"names":["Vec2","x","y","module","exports","require","constant","Object","ball","i","id","dx","dy","fx","fy","hit","size","Math","random","mass","friction","elastic","gravity","time","paused","initial_balls","sim","run","canvas","document","getElementById","context","getContext","width","window","innerWidth","height","innerHeight","list","Array","push","update","length","o","dist","sqrt","penet","mouse_x","mouse_y","clearRect","fillStyle","beginPath","arc","PI","closePath","fill","stroke","addEventListener","e","clientX","offsetLeft","clientY","offsetTop","keyCode","setInterval"],"mappings":"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","file":"toy.d3edc5e2.js","sourceRoot":"..","sourcesContent":["\nclass Vec2 {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n}\n\nmodule.exports = Vec2;\n","\r\n// This does not do anything, other than prove\r\n// the build process is working.\r\nconst Vec2 = require('./vec2');\r\n(new Vec2(1, 0));\r\n\r\nvar constant = new Object()\r\nconstant.friction = 1.02\r\nconstant.elastic = 2000\r\nconstant.gravity = 0\r\nconstant.time = 0.01\r\nconstant.paused = false\r\n\r\ninitial_balls = 100\r\n\r\nfunction ball(i, x, y)\r\n{\r\n    this.id = i\r\n    this.x = x\r\n    this.y = y\r\n    this.dx = 0.0\r\n    this.dy = -10.0\r\n    this.fx = 0.0\r\n    this.fy = 0.0\r\n    this.hit = 0.0\r\n    this.size = 20 + Math.random() * 10\r\n    this.mass = (this.size*this.size*3.14)/10\r\n}\r\n\r\nsim = new Object()\r\nsim.run = function () \r\n{\r\n    if (constant.paused == true) {return}\r\n    sim.canvas = document.getElementById(\"balls_canvas\")\r\n    sim.context = sim.canvas.getContext(\"2d\")\r\n    sim.canvas.width = window.innerWidth\r\n    sim.canvas.height = window.innerHeight\r\n    sim.list = new Array\r\n    for (i=0; i < initial_balls; i++)\r\n    {\r\n        sim.list.push(new ball(i, Math.random()*sim.canvas.width, Math.random()*sim.canvas.height))\r\n    }\r\n    sim.update = function ()\r\n    {\r\n        for (i = 0; i < sim.list.length; i++)\r\n        {\r\n            // collision with another ball\r\n            for (o = i+1; o < sim.list.length; o++)\r\n            {\r\n                //alert('collision by ball i: '+i+' '+sim.list[i]+' o: '+o+' '+sim.list[o])\r\n                var dx = (sim.list[i].x-sim.list[o].x)\r\n                var dy = (sim.list[i].y-sim.list[o].y)\r\n                var dist = Math.sqrt(dx*dx + dy*dy)\r\n                var penet = sim.list[i].size+sim.list[o].size-dist\r\n                if (penet > 0)\r\n                {\r\n                    if (sim.list[i].hit < 225) {sim.list[i].hit += 30}\r\n                    else {sim.list[i].hit = 255}\r\n                    if (sim.list[o].hit < 255){sim.list[o].hit += 30}\r\n                    else {sim.list[o].hit = 255}\r\n                    sim.list[i].fx += dx*penet/dist*constant.elastic\r\n                    sim.list[o].fx -= dx*penet/dist*constant.elastic\r\n                    sim.list[i].fy += dy*penet/dist*constant.elastic\r\n                    sim.list[o].fy -= dy*penet/dist*constant.elastic \r\n                }\r\n                else\r\n                {\r\n                    //alert('collision by ball i: '+i+' '+sim.list[i]+' o: '+o+' '+sim.list[o])\r\n                    //alert('dx: '+dx+' dx^2: '+(dx*dx)+' dy: '+dy+' dy^2: '+(dy*dy)+' \\n '+'ball size i: '+sim.list[i].size +' ball size o: '+sim.list[o].size+' dist: '+dist)\r\n                }\r\n                    \r\n            }\r\n                    \r\n            // collision with the walls\r\n            if (sim.list[i].x - sim.list[i].size < 0)                 {sim.list[i].fx -= (sim.list[i].x - sim.list[i].size)*constant.elastic}\r\n            if (sim.list[i].x + sim.list[i].size > sim.canvas.width)  {sim.list[i].fx -= (sim.list[i].x +sim.list[i].size - sim.canvas.width)*constant.elastic}\r\n            if (sim.list[i].y - sim.list[i].size < 0)                 {sim.list[i].fy -= (sim.list[i].y - sim.list[i].size)*constant.elastic}\r\n            if (sim.list[i].y + sim.list[i].size > sim.canvas.height) {sim.list[i].fy -= (sim.list[i].y + sim.list[i].size - sim.canvas.height)*constant.elastic}\r\n\r\n            // collision with mouse\r\n            var dx = (sim.list[i].x-sim.mouse_x)\r\n            var dy = (sim.list[i].y-sim.mouse_y)\r\n            var dist = Math.sqrt(dx*dx + dy*dy)\r\n            var penet = 100-dist\r\n            if (penet > 0)\r\n            {\r\n                sim.list[i].fx += dx*penet/dist*constant.elastic     // add a suck variable with -1 or +1 value\r\n                sim.list[i].fy += dy*penet/dist*constant.elastic\r\n            }\r\n        }\r\n\r\n        // apply forces and clear them\r\n        for (i in sim.list)\r\n        {\r\n            sim.list[i].dx += sim.list[i].fx/sim.list[i].mass*constant.time\r\n            sim.list[i].dy += sim.list[i].fy/sim.list[i].mass*constant.time\r\n            sim.list[i].dx = sim.list[i].dx/constant.friction\r\n            sim.list[i].dy = sim.list[i].dy/constant.friction\r\n            sim.list[i].x += sim.list[i].dx\r\n            sim.list[i].y += sim.list[i].dy\r\n            sim.list[i].fy = constant.gravity*sim.list[i].mass\r\n            sim.list[i].fx = 0.0\r\n        }\r\n        \r\n        // clear screen\r\n        sim.context.clearRect(0,0,sim.canvas.width,sim.canvas.height) \r\n\r\n        // render balls\r\n        for (i in sim.list)\r\n        {\r\n            sim.context.fillStyle = \"rgb(0,0,\"+sim.list[i].hit+\")\"\r\n            sim.context.beginPath()\r\n            sim.context.arc(sim.list[i].x,sim.list[i].y,sim.list[i].size,0,Math.PI*2,true)\r\n            sim.context.closePath()\r\n            sim.context.fill()\r\n            sim.context.stroke()\r\n            \r\n            if (sim.list[i].hit > 10){sim.list[i].hit -= 10}\r\n            \r\n        }\r\n    }\r\n    sim.canvas.addEventListener(\"mousemove\", \r\n                        function(e) {\r\n                                        sim.mouse_x = (e.clientX-this.offsetLeft)\r\n                                        sim.mouse_y = (e.clientY-this.offsetTop) \r\n                                    }, false)\r\n    sim.canvas.addEventListener(\"click\", function(e) {sim.list.push(new ball(sim.list.length-1, sim.mouse_x, sim.mouse_y+40))}, false)\r\n    window.addEventListener(\"resize\",function(e) {\r\n                            sim.canvas.width = window.innerWidth;\r\n                            sim.canvas.height = window.innerHeight\r\n                        },false)\r\n    window.addEventListener(\"keydown\", function(e) {if (e.keyCode == 32) constant.paused = !constant.paused})\r\n    \t\t\t    \r\n    setInterval(sim.update, 1000/100)\r\n}"]}